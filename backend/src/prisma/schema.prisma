generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app"]
}

model User {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()"))
  username              String                 @unique
  password              String
  role                  UserRole
  membershipLevel       MembershipLevel?       @map("membership_level")
  createdAt             DateTime?              @default(now())
  isDeleted             Boolean                @default(false)
  notices               Notice[]               @relation("UserNotices")
  applications          OrderApplication[]     @relation("UserApplications")
  orderRequests         OrderRequest[]         @relation("UserOrderRequests")
  point                 Point?
  pointChargeRequests   PointChargeRequest[]
  pointTransactions     PointTransaction[]
  pointWithdrawRequests PointWithdrawRequest[]

  @@schema("app")
}

model Point {
  userId  String @id
  balance Int
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("app")
}

model PointTransaction {
  id          String               @id @default(dbgenerated("gen_random_uuid()"))
  userId      String?
  type        PointTransactionType
  amount      Int
  createdAt   DateTime             @default(now())
  description String?
  user        User?                @relation(fields: [userId], references: [id])

  @@schema("app")
}

model PointChargeRequest {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  userId      String?
  amount      Int
  status      String    @default("pending")
  requestedAt DateTime  @default(now())
  approvedAt  DateTime?
  user        User?     @relation(fields: [userId], references: [id])

  @@schema("app")
}

model Bank {
  id               String                 @id @default(dbgenerated("gen_random_uuid()"))
  name             String                 @unique
  accountNumLength Int?
  withdrawRequests PointWithdrawRequest[] @relation("BankWithdrawRequests")

  @@schema("app")
}

model PointWithdrawRequest {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  userId      String?
  bankId      String
  accountNum  String
  amount      Int
  status      String    @default("pending")
  requestedAt DateTime  @default(now())
  processedAt DateTime?
  bank        Bank      @relation("BankWithdrawRequests", fields: [bankId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@schema("app")
}

model OrderRequest {
  id              String             @id @default(dbgenerated("gen_random_uuid()"))
  buyerId         String?
  categoryId      Int?
  subcategoryId   Int?
  title           String
  description     String?
  desiredQuantity Int
  deadline        DateTime?
  requiredPoints  Int
  status          OrderStatus        @default(pending)
  createdAt       DateTime           @default(now())
  applications    OrderApplication[]
  buyer           User?              @relation("UserOrderRequests", fields: [buyerId], references: [id])
  category        Category?          @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subcategory     Subcategory?       @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  workItem        WorkItem?

  @@schema("app")
}

model OrderApplication {
  id                String            @id @default(dbgenerated("gen_random_uuid()"))
  orderRequestId    String
  sellerId          String?
  message           String?
  proposedPrice     Int?
  estimatedDelivery DateTime?
  status            ApplicationStatus @default(pending)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  orderRequest      OrderRequest      @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
  seller            User?             @relation("UserApplications", fields: [sellerId], references: [id])
  workItems         WorkItem?

  @@schema("app")
}

model WorkItem {
  id             String           @id @default(dbgenerated("gen_random_uuid()"))
  orderRequestId String           @unique
  applicationId  String           @unique
  fileUrl        String?
  workLink       String?
  description    String?
  submittedAt    DateTime?
  status         WorkStatus       @default(submitted)
  application    OrderApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  orderRequest   OrderRequest     @relation(fields: [orderRequestId], references: [id])

  @@schema("app")
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  isDeleted     Boolean        @default(false)
  orderRequests OrderRequest[]
  subcategories Subcategory[]  @relation("CategoryToSub")

  @@schema("app")
}

model Subcategory {
  id            Int            @id @default(autoincrement())
  name          String
  parentId      Int
  isDeleted     Boolean        @default(false)
  orderRequests OrderRequest[]
  parent        Category       @relation("CategoryToSub", fields: [parentId], references: [id])

  @@schema("app")
}

model Notice {
  id        String         @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  content   String
  authorId  String?
  priority  NoticePriority @default(normal)
  isActive  Boolean        @default(true)
  isPinned  Boolean        @default(false)
  startDate DateTime       @default(now())
  endDate   DateTime?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  author    User?          @relation("UserNotices", fields: [authorId], references: [id])

  @@schema("app")
}

enum UserRole {
  buyer
  seller
  admin

  @@schema("app")
}

enum MembershipLevel {
  bronze
  silver
  gold
  platinum
  vip

  @@schema("app")
}

enum PointTransactionType {
  charge
  earn
  spend
  withdraw
  admin_adjust

  @@schema("app")
}

enum OrderStatus {
  pending
  progress
  completed
  cancelled

  @@schema("app")
}

enum ApplicationStatus {
  pending
  accepted
  rejected

  @@schema("app")
}

enum WorkStatus {
  submitted
  approved
  rejected

  @@schema("app")
}

enum NoticePriority {
  normal
  important
  urgent

  @@schema("app")
}
